// <auto-generated />
using System;
using Datos.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datos.Migrations
{
    [DbContext(typeof(HospitalBDContext))]
    partial class HospitalBDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Datos.Entities.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("dataReady")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Datos.Entities.Days", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Datos.Entities.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("dataReady")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("especiality_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("especiality_id");

                    b.HasIndex("user_id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Datos.Entities.Especialities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Especialities");
                });

            modelBuilder.Entity("Datos.Entities.Roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Administrador"
                        },
                        new
                        {
                            id = 2,
                            name = "Doctor"
                        },
                        new
                        {
                            id = 3,
                            name = "Cliente"
                        });
                });

            modelBuilder.Entity("Datos.Entities.SchedulesRegister", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("day_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("doctor_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("sched_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("day_id");

                    b.HasIndex("doctor_id");

                    b.HasIndex("sched_id");

                    b.ToTable("SchedulesRegisters");
                });

            modelBuilder.Entity("Datos.Entities.SchedulesSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("finalHour")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("initHour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SchedulesSystems");
                });

            modelBuilder.Entity("Datos.Entities.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("role_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            creadoEn = new DateTime(2024, 8, 6, 2, 14, 29, 42, DateTimeKind.Local).AddTicks(7303),
                            password = "12345",
                            role_id = 1,
                            username = "admin_test"
                        },
                        new
                        {
                            id = 2,
                            creadoEn = new DateTime(2024, 8, 6, 2, 14, 29, 42, DateTimeKind.Local).AddTicks(7318),
                            password = "12345",
                            role_id = 2,
                            username = "doctor_test"
                        },
                        new
                        {
                            id = 3,
                            creadoEn = new DateTime(2024, 8, 6, 2, 14, 29, 42, DateTimeKind.Local).AddTicks(7320),
                            password = "12345",
                            role_id = 3,
                            username = "client_test"
                        });
                });

            modelBuilder.Entity("Datos.Entities.Client", b =>
                {
                    b.HasOne("Datos.Entities.Users", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Datos.Entities.Doctors", b =>
                {
                    b.HasOne("Datos.Entities.Especialities", "Especialities")
                        .WithMany()
                        .HasForeignKey("especiality_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entities.Users", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialities");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Datos.Entities.SchedulesRegister", b =>
                {
                    b.HasOne("Datos.Entities.Days", "day")
                        .WithMany()
                        .HasForeignKey("day_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entities.Doctors", "doctor")
                        .WithMany("schedules")
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datos.Entities.SchedulesSystem", "sched")
                        .WithMany()
                        .HasForeignKey("sched_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("day");

                    b.Navigation("doctor");

                    b.Navigation("sched");
                });

            modelBuilder.Entity("Datos.Entities.Users", b =>
                {
                    b.HasOne("Datos.Entities.Roles", "role")
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("Datos.Entities.Doctors", b =>
                {
                    b.Navigation("schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
